spring mvc框架
一、基本用法步骤
	1、添加依赖（添加service依赖和springmvc依赖）
		<!--    添加service依赖-->
		    <dependency>
		      <groupId>javax.servlet</groupId>
		      <artifactId>javax.servlet-api</artifactId>
		      <version>3.1.0</version>
		      <scope>provided</scope>
		    </dependency>
		<!--    jsp依赖-->
		    <dependency>
		      <groupId>javax.servlet.jsp</groupId>
		      <artifactId>jsp-api</artifactId>
		      <version>2.2.1-b03</version>
		      <scope>provided</scope>
		    </dependency>
		<!--    添加springMvc依赖-->
		    <dependency>
		      <groupId>org.springframework</groupId>
		      <artifactId>spring-webmvc</artifactId>
		      <version>5.3.12</version>
		    </dependency> 
	2、注册中央调度器（在ini文件中注册这个调度器，可以管理所有@contorller注解的类）
		<?xml version="1.0" encoding="UTF-8"?>
		<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
			 version="4.0">
		<!--    注册中央类调度器,客户端向服务器请求后，通过这里找到目标servlet，创建调度器后，能够让调度器找到目标servlet-->
		<!--    项目如果有中央调度器，就证明有使用springmvc-->
		<!--    springmvc中没有servlet类，所以中央调度器找到的是springmvc配置文件创建出来的对象，（可以是注解或者配置文件，配置文件方法暂时不会）-->
		<!--    中央调度器只需要在启动服务器的时候创建就好，类似一个监听器-->
		<!--    启动服务器，默认读取的是WEB-INF/<servlet-name>-servlet.xml配置文件，为了方便，可以修改默认读取的路径-->
		    <servlet>
			<servlet-name>springmvc</servlet-name>
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--        修改默认读取的路径,为resources下的配值文件-->
			<init-param>
			    <param-name>contextConfigLocation</param-name>
			    <param-value>classpath:springmvc.xml</param-value>
			</init-param>
		<!--        在启动服务器的时候，先创建中央调度器，在以下设置创建的先后,又数字的顺序决定创建中央调度器的顺序-->
			<load-on-startup>1</load-on-startup>
		    </servlet>
		    <servlet-mapping>
			<servlet-name>springmvc</servlet-name>
			<url-pattern>*.do</url-pattern>
		    </servlet-mapping>
		</web-app>
	3、创建jsp文件
	4、创建控制器类（注解声明）
	package com.yuqn.controller;

	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.servlet.ModelAndView;
	//    添加控制器注解@Controller
	@Controller
	public class MyController {
	//    @RequestMapping注解，value是惟一的，值与jsp跳转的路径一样
	    @RequestMapping(value = "/some.do")
	//    返回ModelAndView类型，方法自定义
	    public ModelAndView doSome(){
		ModelAndView mv=new ModelAndView();
	//        给mv添加东西
		mv.addObject("msg","hello world");
		mv.addObject("msg2","hello yuqn");
	//        给mv添加页面
		mv.setViewName("two");
	//        返回mv，框架会在后台自动跳转到指定页面
		return mv;
	    }
	}
	5、返回jsp页面
	6、创建springmvc的配置文件（和spring一样）
		声明扫描器，指定@contorller注解所在包名
		<?xml version="1.0" encoding="UTF-8"?>
		<beans xmlns="http://www.springframework.org/schema/beans"
		       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		       xmlns:context="http://www.springframework.org/schema/context"
		       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

		<!--    添加注解扫描器-->
		    <context:component-scan base-package="com.yuqn.controller"></context:component-scan>
		    <!--    配置视图解析器，通过解析器，可以让springmvc框架自动添加路径的前缀和后缀-->
		<!--    通过视图解析器，能过减少重复写路径的相同部分-->
		    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!--        设置前缀-->
			<property name="prefix" value="/WEB-INF/view/"/>
		<!--        设置后缀-->
			<property name="suffix" value=".jsp"/>
		    </bean>
		</beans>
二、@RequestMapping的常用属性
	一、@RequestMapping除了在方法上使用，也可以在类上使用，在类上使用表示模块，即访问里面的方法的时候，需要加上公共部分
		package com.yuqn.Controller;

		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.servlet.ModelAndView;

		@Controller
		//添加公共部分注解,即别人要访问的时候，需要访问的是/test/one.do
		@RequestMapping(value = "/test")
		public class Mycontroller {
		    @RequestMapping(value = "/one.do")
		    public ModelAndView doOne(){
			ModelAndView mv=new ModelAndView();
			mv.addObject("msg","这是one页面");
			mv.setViewName("one");
			return mv;
		    }
		 }
	二、@RequestMapping除了value属性外，还有method属性，表示访问该类或方法需要用到那种请求方式，如果不设置，默认都可以访问
		package com.yuqn.Controller;

		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.RequestMethod;
		import org.springframework.web.servlet.ModelAndView;

		@Controller
		//添加公共部分注解,即别人要访问的时候，需要访问的是/test/one.do
		@RequestMapping(value = "/test")
		public class Mycontroller {
		    @RequestMapping(value = "/one.do",method = RequestMethod.GET)
		    public ModelAndView doOne(){
			ModelAndView mv=new ModelAndView();
			mv.addObject("msg","这是one页面");
			mv.setViewName("one");
			return mv;
		    }
		   }
	三、逐个接收参数（在方法的后面形参位置添加属性，对应的是jsp页面传来的name属性值，即可取得）
		例如：
			jsp代码：
				<form method="post" action="test/two.do">
				    <input type="text" value="post提交">
				    姓名：<input type="text" name="name">
				    年龄：<input type="text" name="age">
				    <input type="submit" value="提交">
				</form>
			控制器代码：
				@RequestMapping(value = "/two.do",method = RequestMethod.POST)
				    public ModelAndView doTwo(String name,Integer age){
					ModelAndView mv=new ModelAndView();
					mv.addObject("msg","这是two页面");
					mv.addObject("name",name);
					mv.addObject("age",age);
					mv.setViewName("two");
					return mv;
				    }
	四、@RequestParam注解，改接收参数方法存在弊端：如果没有参数的话，会出现400报错，空指针异常，通过@RequestParam注解，可以使jsp传递的name值和方法形参不必一样，而且可以为空
		jsp代码：
			<form method="post" action="test/four.do">
			    <input type="text" value="post提交">
			    姓名：<input type="text" name="name">
			    年龄：<input type="text" name="age">
			    <input type="submit" value="提交">
			</form>
		控制器代码：
			//    可以传数组格式
			    @RequestMapping(value = {"/three.do","/four.do"})
			//    通过@RequeatParam注解，可以将jsp传递的name值与形参值关联，value的值为jsp传递的值
			    public ModelAndView doTf(@RequestParam(value = "name",required = false) String rname,
						     @RequestParam(value = "age",required = false) Integer rage){
				ModelAndView mv=new ModelAndView();
				mv.addObject("msg","这是three,four页面");
				mv.addObject("name",rname);
				mv.addObject("age",rage);
				mv.setViewName("two");
				return mv;
			    }
	五、对象接收参数（方法的形参用对象，框架会自动把jsp传来的属性值赋给对象）
	六、四种返回对象（分别为modelandview，string，void，object）
		第一种：modelandview
			返回数据和视图使用
		第二种：string
			返回视图使用
			也可以返回字符串，如果返回字符串，需要添加@ResponseBody注解，而且会有乱码，需要在@RequestMapping里面添加produces属性，produces="text/plain;charset=utf-8"
		第三种：void
			一般不用
		第四种：object
			返回数据，类似ajax
			使用步骤：
				一、添加依赖
					<!--    添加jackson依赖包-->
					    <dependency>
					      <groupId>com.fasterxml.jackson.core</groupId>
					      <artifactId>jackson-core</artifactId>
					      <version>2.13.0</version>
					    </dependency>
					    <dependency>
					      <groupId>com.fasterxml.jackson.core</groupId>
					      <artifactId>jackson-databind</artifactId>
					      <version>2.13.0</version>
					    </dependency>
				二、添加注解驱动（在springm.xml里面）
					<?xml version="1.0" encoding="UTF-8"?>
						<beans xmlns="http://www.springframework.org/schema/beans"
						       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
						       xmlns:context="http://www.springframework.org/schema/context"
						       xmlns:mvc="http://www.springframework.org/schema/mvc"
						       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
						    <!--    添加注解扫描器-->
						    <context:component-scan base-package="com.yuqn.controller"/>
						    <!--    配置视图解析器，通过解析器，可以让springmvc框架自动添加路径的前缀和后缀-->
						    <!--    通过视图解析器，能过减少重复写路径的相同部分-->
						    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
							<!--        设置前缀-->
							<property name="prefix" value="/WEB-INF/view/"/>
							<!--        设置后缀-->
							<property name="suffix" value=".jsp"/>
						    </bean>
						<!--    添加注解驱动，返回json数据-->
						    <mvc:annotation-driven/>
						</beans>
				三、使用注解
					//    doAjax（）方法返回值是object类型，用于返回ajax请求数据，使用@ResponseBody注解
					    @RequestMapping(value = "/ajax.do")
					    @ResponseBody
					    public Student doAjax(){
						Student student=new Student("余其楠",21);
						return student;
					    }
	<!-- post方法传递的时候，如果中文的话会出现乱码，可以添加过滤器，如下 -->
	七、添加过滤器（解决中文乱码问题）
		<!--    添加过滤器，设置字符为utf-8，防止post中文乱码-->
		    <filter>
			<filter-name>characterEncodingFilter</filter-name>
			<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!--        设置字符编码-->
			<init-param>
			    <param-name>encoding</param-name>
			    <param-value>utf-8</param-value>
			</init-param>
		<!--        设置两个默认为false方法的布尔值为true-->
			<init-param>
			    <param-name>forceRequestEncoding</param-name>
			    <param-value>true</param-value>
			</init-param>
			<init-param>
			    <param-name>forceResponseEncoding</param-name>
			    <param-value>true</param-value>
			</init-param>
		    </filter>
		<!--    设置所有请求必须先通过这个过滤器-->
		    <filter-mapping>
			<filter-name>characterEncodingFilter</filter-name>
			<url-pattern>/*</url-pattern>
		    </filter-mapping>
三、*.do和/
	使用/的第一种方法：
		在配置文件下添加
		<mvc:annotation-driven/>
		<mvc:default-servlet-handler/>
	第二种方法：
		<!--    如果使用/的话，需要添加这个代码，将所有静态资源文件交给tomcat，否则加载不出来-->
	    <mvc:resources mapping="/static/**" location="/static/" />
	    <mvc:annotation-driven/>